{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "innosyn-pipeline-syn-ws"
		},
		"Stellar Airbus v2 FS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Stellar Airbus v2 FS'"
		},
		"Stellar Data Storage Account v2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Stellar Data Storage Account v2'"
		},
		"innosyn-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'innosyn-pipeline-syn-ws-WorkspaceDefaultSqlServer'"
		},
		"LiamTest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LiamTest'"
		},
		"Stellar Airbus v2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rawdatajbqezt.dfs.core.windows.net"
		},
		"Stellar Pipeline Key Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://innosyn-pipeline-kv.vault.azure.net/"
		},
		"innosyn-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synhnsdl2xmc.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Blackshark Building Detection')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Wait for Blackshark Model",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Blackshark Model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(not(equals(string(variables('FunctionCompleted')), 'running')), not(equals(string(variables('FunctionCompleted')), 'active'))), not(equals(string(variables('FunctionCompleted')), 'preparing')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait for Blackshark",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Set FunctionCompleted Custom Vision",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "Check Status Blackshark",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://',pipeline().parameters.BatchName,'.',pipeline().parameters.BatchLocation,'.batch.azure.com/jobs/',pipeline().parameters.JobName,'/tasks/stllr-bshrk-task-', pipeline().RunId, '?api-version=2022-01-01.15.0')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://batch.core.windows.net/"
										}
									}
								},
								{
									"name": "Set FunctionCompleted Custom Vision",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check Status Blackshark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FunctionCompleted",
										"value": {
											"value": "@activity('Check Status Blackshark').output['state']",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FunctionError",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check Status Blackshark",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FunctionError",
										"value": {
											"value": "@activity('Check Status Blackshark').output['executionInfo']['failureInfo']",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Blackshark Model",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy Config file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.BatchName,'.',pipeline().parameters.BatchLocation,'.batch.azure.com/jobs/',pipeline().parameters.JobName,'/tasks?api-version=2020-03-01.11.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json; odata=minimalmetadata; charset=utf-8"
							},
							"body": {
								"value": "@json(concat('{\n  \"id\": \"stllr-bshrk-task-', pipeline().RunId, '\",\n  \"commandLine\": \"\",\n  \"containerSettings\": {\n    \"imageName\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['algImageName'],'\",\n    \"containerRunOptions\": \"--rm --workdir / -v /mnt/batch/tasks/fsmounts/S/', pipeline().parameters.Prefix, ':', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'], '\",\n    \"registry\": {\n        \"registryServer\": \"', split(activity('Read Spec Document').output['runStatus'].output.sink.value[0]['algImageName'], '/')[0], '\",\n        \"username\": \"external-msft\",\n        \"password\": \"9STIVwl2RiaQqDABXghQa7Xtliwz=JoY\"\n    }\n  },\n  \"userIdentity\": {\n        \"autoUser\": {\n            \"scope\": \"pool\",\n            \"elevationLevel\": \"admin\"\n        }\n    }\n}'))",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://batch.core.windows.net/"
							}
						}
					},
					{
						"name": "Copy GeoTiff",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Copy noop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/copy_noop/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--src_container",
								"@pipeline().parameters.Prefix",
								"--src_folder",
								"warp",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--dst_fileshare",
								"volume-a",
								"--dst_folder",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['logsDirectory'])"
							],
							"targetBigDataPool": {
								"referenceName": "pooldl2xmc",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Config file",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Copy GeoTiff",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Copy noop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/copy_noop/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--src_container",
								"@pipeline().parameters.Prefix",
								"--src_folder",
								"@concat('config/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--dst_fileshare",
								"volume-a",
								"--dst_folder",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])"
							],
							"targetBigDataPool": {
								"referenceName": "pooldl2xmc",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Raster and Vector Output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait for Blackshark Model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
										"type": "Expression"
									},
									"wildcardFileName": "*.*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "gls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "gld",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFolderPath": "detections",
									"DestinationContainerName": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Read Spec Document",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ReadSpecDocumentFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"filename": "bshrk-building.json",
										"folderpath": "config",
										"containername": {
											"value": "@pipeline().parameters.Prefix",
											"type": "Expression"
										}
									},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"BatchName": {
						"type": "string"
					},
					"BatchLocation": {
						"type": "string"
					},
					"JobName": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionCompleted": {
						"type": "String"
					},
					"FunctionError": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-31T20:09:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Copy noop')]",
				"[concat(variables('workspaceId'), '/bigDataPools/pooldl2xmc')]",
				"[concat(variables('workspaceId'), '/datasets/gls')]",
				"[concat(variables('workspaceId'), '/datasets/gld')]",
				"[concat(variables('workspaceId'), '/dataflows/ReadSpecDocumentFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Blackshark Model Transforms')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Warp to change CRS",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Crop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Warp",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_warp/src/warp.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"crop"
							],
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Crop",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "More than one GeoTiff",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Crop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_crop/src/crop.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"@variables('CropSourceFolder')",
								"--config_file_name",
								"config-naip.json",
								"--linked_service_name",
								"Stellar Airbus v2"
							],
							"targetBigDataPool": {
								"referenceName": "pooldl2xmc",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "GetFilesToMosaic",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "rawtifs",
								"type": "DatasetReference",
								"parameters": {
									"containername": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folderpath": "raw"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "More than one GeoTiff",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For Each File to Mosaic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(activity('GetFilesToMosaic').output.childItems),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Crop Source Folder to raw",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CropSourceFolder",
										"value": "raw"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Mosaic",
									"type": "SparkJob",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"sparkJob": {
											"referenceName": "Mosaic",
											"type": "SparkJobDefinitionReference"
										},
										"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_mosaic/src/mosaic.py",
										"args": [
											"--storage_account_name",
											"@pipeline().parameters.StorageAccountName",
											"--storage_account_key",
											"@pipeline().parameters.StorageAccountKey",
											"--storage_container",
											"@pipeline().parameters.Prefix",
											"--src_folder_name",
											"raw"
										],
										"targetBigDataPool": {
											"referenceName": "pooldl2xmc",
											"type": "BigDataPoolReference"
										},
										"executorSize": "Medium",
										"conf": {
											"spark.dynamicAllocation.minExecutors": 2,
											"spark.dynamicAllocation.maxExecutors": 3
										},
										"driverSize": "Medium",
										"numExecutors": 2
									}
								},
								{
									"name": "Set Crop Source Folder to mosaic",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Mosaic",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CropSourceFolder",
										"value": "mosaic"
									}
								}
							]
						}
					},
					{
						"name": "For Each File to Mosaic",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFilesToMosaic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFilesToMosaic').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set Mosaic File Names",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Store Temp Mosaic File Names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MosaicFileNames",
										"value": {
											"value": "@concat(variables('TempMosaicFileNames'), if(equals(variables('TempMosaicFileNames'), ''),'',','), item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Store Temp Mosaic File Names",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempMosaicFileNames",
										"value": {
											"value": "@variables('MosaicFileNames')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionCompleted": {
						"type": "String",
						"defaultValue": "None"
					},
					"FunctionError": {
						"type": "String"
					},
					"MosaicFileNames": {
						"type": "String"
					},
					"TempMosaicFileNames": {
						"type": "String"
					},
					"CropSourceFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-31T15:14:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Warp')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Crop')]",
				"[concat(variables('workspaceId'), '/bigDataPools/pooldl2xmc')]",
				"[concat(variables('workspaceId'), '/datasets/rawtifs')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Mosaic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2E Blackshark Model Flow v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Blackshark Model Transforms",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Blackshark Model Transforms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Blackshark Building Detection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Blackshark Model Transforms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Blackshark Building Detection",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"BatchName": {
									"value": "@pipeline().parameters.BatchAccountName",
									"type": "Expression"
								},
								"BatchLocation": {
									"value": "@pipeline().parameters.BatchLocation",
									"type": "Expression"
								},
								"JobName": {
									"value": "@pipeline().parameters.BatchJobName",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string",
						"defaultValue": "rawdatajbqezt"
					},
					"StorageAccountKey": {
						"type": "string"
					},
					"BatchAccountName": {
						"type": "string",
						"defaultValue": "innosynorcbatchact"
					},
					"BatchJobName": {
						"type": "string"
					},
					"BatchLocation": {
						"type": "string",
						"defaultValue": "southcentralus"
					}
				},
				"variables": {
					"StorageAccountConnString": {
						"type": "String"
					},
					"StorageAccountName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-31T20:09:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Blackshark Model Transforms')]",
				"[concat(variables('workspaceId'), '/pipelines/Blackshark Building Detection')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gld')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Stellar Airbus v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationFolderPath": {
						"type": "string"
					},
					"DestinationContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DestinationFolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().DestinationContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Airbus v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Stellar Airbus v2 FS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Airbus v2 FS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rawtifs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Stellar Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spec_doc_specification')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Stellar Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					},
					"containername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stellar Airbus v2 FS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('Stellar Airbus v2 FS_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Stellar Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AirbusStorageAccountKey"
					},
					"fileShare": "volume-a"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stellar Airbus v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Stellar Airbus v2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stellar Data Storage Account v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Stellar Data Storage Account v2_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Stellar Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "AirbusStorageAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/Stellar Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Stellar Pipeline Key Vault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Stellar Pipeline Key Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/innosyn-pipeline-syn-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('innosyn-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/innosyn-pipeline-syn-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('innosyn-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadSpecDocumentFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spec_doc_specification",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"name": "sink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source",
						"source sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/spec_doc_specification')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/orbital-ai-analytics-nb')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Geospatialspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "dd3a92d3-a6ad-4244-8ec6-5efec71c4e7d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
						"name": "Geospatialspark",
						"type": "Spark",
						"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#Print information from the raster data\r\n",
							"from osgeo import gdal  \r\n",
							"gdal.UseExceptions()\r\n",
							"access_key = TokenLibrary.getSecret('innosyn-pipeline-kv','GeospatialStorageAccountKey')\r\n",
							"gdal.SetConfigOption('AZURE_STORAGE_ACCOUNT', 'rawdatajbqezt')\r\n",
							"gdal.SetConfigOption('AZURE_STORAGE_ACCESS_KEY', access_key)  \r\n",
							"dataset_info = gdal.Info('/vsiadls/innosyn/raw/sample_4326.tif')\r\n",
							"print(dataset_info)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Convert GeoTiff to PNG by using GDAL\r\n",
							"tiff_in = \"/vsiadls/innosyn/raw/sample_4326.tif\"\r\n",
							"png_out = \"/vsiadls/innosyn/raw/sample_4326.png\"\r\n",
							"options = gdal.TranslateOptions(format='PNG')\r\n",
							"gdal.Translate(png_out, tiff_in, options=options)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Store geotif image in Azure Data Lake Storage\r\n",
							"import shutil\r\n",
							"import sys\r\n",
							"from osgeo import gdal\r\n",
							"from notebookutils import mssparkutils\r\n",
							"mssparkutils.fs.unmount('/test')\r\n",
							"gdal.UseExceptions()\r\n",
							"mssparkutils.fs.mount(\r\n",
							"    \"abfss://innosyn@rawdatajbqezt.dfs.core.windows.net\",\r\n",
							"    \"/test\",\r\n",
							"    {\"linkedService\":\"innosyn_ajvt_linked_service\"}\r\n",
							")\r\n",
							"access_key = TokenLibrary.getSecret('innosyn-pipeline-kv','GeospatialStorageAccountKey')\r\n",
							"gdal.SetConfigOption('AZURE_STORAGE_ACCOUNT', 'rawdatajbqezt')\r\n",
							"gdal.SetConfigOption('AZURE_STORAGE_ACCESS_KEY', access_key)\r\n",
							"options = gdal.WarpOptions(options=['tr'])\r\n",
							"gdal.Warp('ajvt_image.tif', '/vsiadls/innosyn/raw/sample_4326.tif', options=options)\r\n",
							"jobId = mssparkutils.env.getJobId()\r\n",
							"shutil.copy(\"ajvt_image.tif\", f\"/synfs/{jobId}/test/ajvt_image.tif\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Plot geotif image from blob storage container\r\n",
							"import rasterio\r\n",
							"from matplotlib import pyplot\r\n",
							"img_path = 'https://rawdatajbqezt.blob.core.windows.net/innosyn/raw/Manufacturing_ElSegundo_LSFO_SNR5H2S.tif?sp=r&st=2022-06-14T13:50:50Z&se=2022-06-17T21:50:50Z&spr=https&sv=2021-06-08&sr=b&sig=XInwNf3pYSrmhMovMbPbk8G9tVQ9KzzwO3cbBhKCwMo%3D'\r\n",
							"src = rasterio.open(img_path)\r\n",
							"pyplot.imshow(src.read(1), cmap='pink')\r\n",
							"pyplot.show()"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/plot-image-from-naip-nb')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "stacapipool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "febd3d25-a839-4785-aaef-49cbff6b3df8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/stacapipool",
						"name": "stacapipool",
						"type": "Spark",
						"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/stacapipool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pystac_client import Client\r\n",
							"import planetary_computer as pc"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"area_of_interest = {\r\n",
							"    \"type\": \"Polygon\",\r\n",
							"    \"coordinates\": [\r\n",
							"        [\r\n",
							"            [-111.9839859008789, 40.5389819819361],\r\n",
							"            [-111.90502166748045, 40.5389819819361],\r\n",
							"            [-111.90502166748045, 40.57015381856105],\r\n",
							"            [-111.9839859008789, 40.57015381856105],\r\n",
							"            [-111.9839859008789, 40.5389819819361],\r\n",
							"        ]\r\n",
							"    ],\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"range_old = \"2010-01-01/2013-01-01\"\r\n",
							"range_new = \"2018-01-01/2021-01-01\""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"catalog = Client.open(\"https://planetarycomputer.microsoft.com/api/stac/v1\")\r\n",
							"\r\n",
							"search_old = catalog.search(\r\n",
							"    collections=[\"naip\"], intersects=area_of_interest, datetime=range_old\r\n",
							")\r\n",
							"\r\n",
							"search_new = catalog.search(\r\n",
							"    collections=[\"naip\"], intersects=area_of_interest, datetime=range_new\r\n",
							")\r\n",
							"\r\n",
							"items_old = list(search_old.get_items())\r\n",
							"items_new = list(search_new.get_items())\r\n",
							"\r\n",
							"print(f\"{len(items_old)} Items found in the 'old' range\")\r\n",
							"print(f\"{len(items_new)} Items found in the 'new' range\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from shapely.geometry import shape\r\n",
							"\r\n",
							"area_shape = shape(area_of_interest)\r\n",
							"target_area = area_shape.area\r\n",
							"\r\n",
							"\r\n",
							"def area_of_overlap(item):\r\n",
							"    overlap_area = shape(item.geometry).intersection(shape(area_of_interest)).area\r\n",
							"    return overlap_area / target_area\r\n",
							"\r\n",
							"\r\n",
							"item_old = sorted(items_old, key=area_of_overlap, reverse=True)[0]\r\n",
							"item_new = sorted(items_new, key=area_of_overlap, reverse=True)[0]"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import rioxarray\r\n",
							"\r\n",
							"\r\n",
							"def create_image(item):\r\n",
							"    print(item.datetime)\r\n",
							"    href = pc.sign(item.assets[\"image\"].href)\r\n",
							"\r\n",
							"    ds = rioxarray.open_rasterio(href).sel(band=[4, 2, 3])\r\n",
							"    img = ds.rio.clip([area_of_interest], crs=\"epsg:4326\").plot.imshow(\r\n",
							"        rgb=\"band\", aspect=1.5, size=12\r\n",
							"    )\r\n",
							"    img.axes.set_axis_off()\r\n",
							"    return img.axes"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"create_image(item_old);"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"create_image(item_new);"
						],
						"outputs": [],
						"execution_count": 20
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stac-planetary-computer-nb')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "stacapipool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9efa31ee-ae56-4e84-bf7d-bfce6d91ad82"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/stacapipool",
						"name": "stacapipool",
						"type": "Spark",
						"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/stacapipool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pystac_client import Client\r\n",
							"catalog = Client.open(\"https://planetarycomputer.microsoft.com/api/stac/v1\")"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"time_range = \"2020-12-01/2020-12-31\"\r\n",
							"bbox = [-122.2751, 47.5469, -121.9613, 47.7458]\r\n",
							"\r\n",
							"search = catalog.search(collections=[\"landsat-8-c2-l2\"], bbox=bbox, datetime=time_range)\r\n",
							"items = search.get_all_items()\r\n",
							"len(items)"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"area_of_interest = {\r\n",
							"    \"type\": \"Polygon\",\r\n",
							"    \"coordinates\": [\r\n",
							"        [\r\n",
							"            [-122.2751, 47.5469],\r\n",
							"            [-121.9613, 47.9613],\r\n",
							"            [-121.9613, 47.9613],\r\n",
							"            [-122.2751, 47.9613],\r\n",
							"            [-122.2751, 47.5469],\r\n",
							"        ]\r\n",
							"    ],\r\n",
							"}\r\n",
							"\r\n",
							"time_range = \"2020-12-01/2020-12-31\"\r\n",
							"\r\n",
							"search = catalog.search(\r\n",
							"    collections=[\"landsat-8-c2-l2\"], intersects=area_of_interest, datetime=time_range\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import geopandas\r\n",
							"df = geopandas.GeoDataFrame.from_features(items.to_dict(), crs=\"epsg:4326\")\r\n",
							"df"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"selected_item = min(items, key=lambda item: item.properties[\"eo:cloud_cover\"])\r\n",
							"selected_item"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import rich.table\r\n",
							"table = rich.table.Table(\"Asset Key\", \"Descripiption\")\r\n",
							"for asset_key, asset in selected_item.assets.items():\r\n",
							"    # print(f\"{asset_key:<25} - {asset.title}\")\r\n",
							"    table.add_row(asset_key, asset.title)\r\n",
							"\r\n",
							"table"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"selected_item.assets[\"rendered_preview\"].to_dict()"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from IPython.display import Image\r\n",
							"Image(url=selected_item.assets[\"rendered_preview\"].href, width=500)"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import requests\r\n",
							"url = selected_item.assets[\"SR_B2\"].href\r\n",
							"print(\"Accessing\", url)\r\n",
							"response = requests.get(url)\r\n",
							"response"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import planetary_computer\r\n",
							"signed_href = planetary_computer.sign(selected_item).assets[\"SR_B2\"].href"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy noop')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pooldl2xmc",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Copy noop",
					"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/copy_noop/src/mosaic.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "01767b3a-cede-4abf-8b79-52cb6d0ff80d"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Crop')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pooldl2xmc",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Crop",
					"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_crop/src/crop.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f4cbbafe-9d98-476f-9bd4-e5bfc7bad06c"
					},
					"args": [],
					"jars": [],
					"files": [
						"abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_crop/src/utils.py"
					],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Mosaic')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pooldl2xmc",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Mosaic",
					"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_mosaic/src/mosaic.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "811de002-982f-4b4b-9732-147d3565c502"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 3
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Warp')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "pooldl2xmc",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Warp",
					"file": "abfss://spark-jobs@synhnsdl2xmc.dfs.core.windows.net/raster_warp/src/warp.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "335dd1ad-fc75-4734-ad92-03a79e9ad399"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 3
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pooldl2xmc')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 1
				},
				"nodeCount": 0,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - gdal=3.3.0\n  - pip>=20.1.1\n  - azure-storage-file-datalake\n  - libgdal\n  - shapely\n  - pyproj\n  - pip:\n    - rasterio\n    - geopandas\n",
					"filename": "/home/anthonyb/Azure-Orbital-Analytics-Samples/deploy/environment.yml",
					"time": "2022-05-10T15:53:25.0987366Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Geospatialspark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 8,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\r\nchannels:\r\n  - defaults\r\ndependencies:\r\n  - azure-storage-file-datalake\r\n  - gdal=3.3.0\r\n  - libgdal\r\n  - pip>=20.1.1\r\n  - pyproj\r\n  - shapely\r\n  - pip:\r\n      - \"rasterio\"\r\n      - \"geopandas\"",
					"filename": "environment.yml",
					"time": "2022-06-06T15:15:28.7036181Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/poolYLQS')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\r\nchannels:\r\n  - defaults\r\ndependencies:\r\n  - azure-storage-file-datalake\r\n  - gdal=3.3.0\r\n  - libgdal\r\n  - pip>=20.1.1\r\n  - pyproj\r\n  - shapely\r\n  - pip:\r\n      - \"rasterio\"\r\n      - \"geopandas\"",
					"filename": "environment.yml",
					"time": "2022-06-08T16:08:46.0952706Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stacapipool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\r\nchannels:\r\n  - defaults\r\ndependencies:\r\n  - pystac-client  \r\n  - pip:\r\n      - rich\r\n      - planetary-computer\r\n      - rioxarray\r\n      - rasterio\r\n      - geopandas",
					"filename": "environment.yml",
					"time": "2022-06-16T20:08:12.4228171Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LiamTest')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LiamTest_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		}
	]
}