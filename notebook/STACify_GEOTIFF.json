{
	"name": "STACify_GEOTIFF",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7f402eaf-b411-4f8e-9a03-f36924374ce4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### This script was built of imagery being ingested from DroneDeploy"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"GEOTIFF_Dest = \"https://innoaoaidata.blob.core.windows.net/liamdest/GEOTIFF_STAC_DEST/\""
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from urllib.parse import urlparse\r\n",
					"parsed_url = urlparse(GEOTIFF_Dest)\r\n",
					"\r\n",
					"accountName = parsed_url.netloc\r\n",
					"container = parsed_url.path.split(\"/\")[1]\r\n",
					"\r\n",
					"try:\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"        f\"wasbs://{container}@{accountName}\",\r\n",
					"        \"/STAC_Dest\",\r\n",
					"        {\"linkedService\":\"innoaoaidata_STAC\"}\r\n",
					"    )\r\n",
					"    print(\"Successful mount of source to /STAC_Dest\")\r\n",
					"except:\r\n",
					"    print(\"FAILED TO MOUNT STAC DEST\")\r\n",
					"    print(\"Either due to the drive already been mounted, or because the path is incorrect.\")\r\n",
					""
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Return array of all files in directory of type\r\n",
					"import os\r\n",
					"\r\n",
					"def get_blob_file_list(directory, filetype):\r\n",
					"    \"\"\"\r\n",
					"    Function to get a full list of files in a directory based on file type\r\n",
					"    Arguments:\r\n",
					"        directory: Directory path of folder you want to pull files from\r\n",
					"        filetype: .XXXX being the file extension of the file you are searching for (including a dot \".\")- ex- \".JPEG\" or \".JSON\"\r\n",
					"    Returns:\r\n",
					"        Array of filepaths/filename w/extension\r\n",
					"    \"\"\"\r\n",
					"    file_array = []\r\n",
					"    for file in os.listdir(directory):\r\n",
					"        file_ext = os.path.splitext(file)[1]\r\n",
					"        if file_ext == filetype:\r\n",
					"            file_array.append(directory+file)\r\n",
					"    return file_array"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\r\n",
					"import rasterio\r\n",
					"\r\n",
					"# This function is specific to DroneDeploy created data since it has a start time & and and end time. Another function needs to be created for other types of orthos.\r\n",
					"\r\n",
					"def get_tiff_datetime(tiff_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return a STAC-customized DateTime from TIFF image GDAL Information. Luckily with the DroneDeploy data, it is already STAC formatted\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: path to TIFF which you want STAC-DateTime for. TIFF must have DateTime in GDAL header.\r\n",
					"    Returns:\r\n",
					"        STAC-Specific DateTime as a string\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    tiff = rasterio.open(tiff_path)\r\n",
					"    filetags = tiff.tags()\r\n",
					"    tiff.close()\r\n",
					"\r\n",
					"    GDAL_dd_acquisitionStartDate = filetags.get(\"acquisitionEndDate\")\r\n",
					"    GDAL_dd_acquisitionEndDate = filetags.get(\"acquisitionStartDate\")\r\n",
					"\r\n",
					"    return GDAL_dd_acquisitionStartDate, GDAL_dd_acquisitionEndDate"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_tiff_sensor(tiff_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return \"RGB\"\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: not used, but still good practice if we want to extend this function\r\n",
					"    Returns:\r\n",
					"        RGB as a string\r\n",
					"    \"\"\"\r\n",
					"    sensor_type = \"RGB\"\r\n",
					"    return sensor_type"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from osgeo import gdal\r\n",
					"import os\r\n",
					"\r\n",
					"def tiff_to_cog(tiff_path):\r\n",
					"    options = gdal.TranslateOptions(format='COG',creationOptions = ['TFW=YES', 'COMPRESS=JPEG'])\r\n",
					"    newname = os.path.splitext(tiff_path)[0]+\"_COG.tif\"\r\n",
					"\r\n",
					"    #Getting Datetime\r\n",
					"    start_dt, end_dt = get_tiff_datetime(tiff_path)\r\n",
					"\r\n",
					"    #Getting Sensor\r\n",
					"    sensor = get_tiff_sensor(tiff_path)\r\n",
					"\r\n",
					"    dst = gdal.Translate(newname, tiff_path, options=options)\r\n",
					"    dst.SetMetadata( {'datetime': 'NULL', 'start_datetime': start_dt, 'end_datetime': end_dt, 'sensor': sensor})\r\n",
					"    dst = None\r\n",
					"    \r\n",
					"    #Remove old file\r\n",
					"    os.remove(tiff_path)\r\n",
					"    #Rename COG to old file name\r\n",
					"    os.rename(newname, tiff_path)\r\n",
					"\r\n",
					"    print(\"Converted\")"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"\r\n",
					"parsed_url = urlparse(GEOTIFF_Dest)\r\n",
					"if parsed_url.path.endswith('/'):\r\n",
					"    container = '/'.join(parsed_url.path.split('/')[2:])\r\n",
					"else:\r\n",
					"    container = '/'.join(parsed_url.path.split('/')[2:])+\"/\"\r\n",
					"\r\n",
					"img_path = f'/synfs/'+jobId+'/STAC_Dest/'+container\r\n",
					"\r\n",
					"outarray = get_blob_file_list(img_path, \".tif\")\r\n",
					"print(outarray)\r\n",
					"\r\n",
					"for tiff in outarray:\r\n",
					"    filename = os.path.basename(tiff)\r\n",
					"    print(filename + \" is currently being converted to COG\")\r\n",
					"    print(\"\")\r\n",
					"\r\n",
					"    #tiff_to_cog(tiff)"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}