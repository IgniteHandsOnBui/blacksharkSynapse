{
	"name": "maxar-ard-blob-storage-nb-ajvt",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "775908fe-b36f-4c2f-9e8c-c8d7c596b564"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from max_ard import Select"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"bbox = [-106.8, 35.1, -106.4, 35.4]\r\n",
					"datetime =  \"2020-07-01T00:00:00Z/2021-01-25T00:00:00Z\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"query = {\r\n",
					"        \"platform\": {\r\n",
					"          \"eq\": \"worldview-02\"\r\n",
					"        },\r\n",
					"        \"aoi:cloud_free_percentage\": {\r\n",
					"          \"gte\": 95\r\n",
					"        },\r\n",
					"        \"aoi:data_percentage\": {\r\n",
					"          \"gte\": 75\r\n",
					"        }\r\n",
					"    }"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from max_ard.session import get_user_session"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"\r\n",
					"# Set environment variables\r\n",
					"os.environ['ARD_USERNAME'] = 'anthony.bui@chevron.com'\r\n",
					"os.environ['ARD_PASSWORD'] = 'cvxMaxar@2022'\r\n",
					"\r\n",
					"# Get environment variables\r\n",
					"ARD_USERNAME = os.getenv('ARD_USERNAME')\r\n",
					"ARD_USERNAME = os.environ.get('ARD_PASSWORD')"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"select = Select(datetime=datetime, bbox=bbox, query=query, stack_depth=3)\r\n",
					"select.submit()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"select.wait_for_success()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"select"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = select.results\r\n",
					"print(f'Found the following acquisition IDs: {results.acquisition_ids}')\r\n",
					"print(f'Covering {len(results.stacks)} cells')\r\n",
					"print('Ordering this selection will use:')\r\n",
					"print(f'{select.usage.area.total_imagery_sqkm} sq.km')"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tile = results.tiles[0]\r\n",
					"print('Tile:', tile)\r\n",
					"print('Cell:', tile.cell)\r\n",
					"for k,v in tile.properties.items():\r\n",
					"    print(f'  {k}: {v}')\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output_config = {\r\n",
					"    \"azure_blob_storage\": {\r\n",
					"        \"sas_url\": \"https://rawdatajbqezt.blob.core.windows.net/maxar-ard?sp=r&st=2022-11-11T14:37:45Z&se=2022-11-30T22:37:45Z&spr=https&sv=2021-06-08&sr=c&sig=7emtL5p02%2F%2BUhzZTDTG4ZhQEyWLKgxedL2K9CCvaLaI%3D\",\r\n",
					"        \"container\": \"maxar-ard\",\r\n",
					"        \"prefix\": \"prefix-1\"\r\n",
					"    }\r\n",
					"}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%matplotlib inline\r\n",
					"from rasterio.plot import show\r\n",
					"with tile.open_asset('visual') as src:\r\n",
					"    # setting the output shape to a smaller size makes rasterio read overview instead of full resolution data\r\n",
					"    arr = src.read(out_shape=(3, int(src.height / 64), int(src.width / 64)))\r\n",
					"    show(arr)"
				],
				"execution_count": 16
			}
		]
	}
}