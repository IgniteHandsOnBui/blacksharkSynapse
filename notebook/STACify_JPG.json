{
	"name": "STACify_JPG",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ac2fe75-4da1-4e22-9588-cc5fce7a7b74"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The goal of this notebook is to test a productionized version of the STAC_PreProcessing_Guide"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"JSON_Dest = \"https://innoaoaidata.blob.core.windows.net/liamdest/RBU_STAC_DEST/\""
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from urllib.parse import urlparse\r\n",
					"parsed_url = urlparse(JSON_Dest)\r\n",
					"\r\n",
					"accountName = parsed_url.netloc\r\n",
					"container = parsed_url.path.split(\"/\")[1]\r\n",
					"\r\n",
					"try:\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"        f\"wasbs://{container}@{accountName}\",\r\n",
					"        \"/STAC_Dest\",\r\n",
					"        {\"linkedService\":\"innoaoaidata_STAC\"}\r\n",
					"    )\r\n",
					"    print(\"Successful mount of source to /STAC_Dest\")\r\n",
					"except:\r\n",
					"    print(\"FAILED TO MOUNT STAC DEST\")\r\n",
					"    print(\"Either due to the drive already been mounted, or because the path is incorrect.\")\r\n",
					""
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Return array of all files in directory of type\r\n",
					"import os\r\n",
					"\r\n",
					"def get_blob_file_list(directory, filetype):\r\n",
					"    \"\"\"\r\n",
					"    Function to get a full list of files in a directory based on file type\r\n",
					"    Arguments:\r\n",
					"        directory: Directory path of folder you want to pull files from\r\n",
					"        filetype: .XXXX being the file extension of the file you are searching for (including a dot \".\")- ex- \".JPEG\" or \".JSON\"\r\n",
					"    Returns:\r\n",
					"        Array of filepaths/filename w/extension\r\n",
					"    \"\"\"\r\n",
					"    file_array = []\r\n",
					"    for file in os.listdir(directory):\r\n",
					"        file_ext = os.path.splitext(file)[1]\r\n",
					"        if file_ext == filetype:\r\n",
					"            file_array.append(directory+file)\r\n",
					"    return file_array"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import rasterio\r\n",
					"\r\n",
					"def get_EXIF_lat(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to get the Latitude of a JPEG image\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: path to jpeg file\r\n",
					"    Returns:\r\n",
					"        string of latitude in format of (dd) (mm) (ss.sss) & GPS Reference in terms of (S or N)\r\n",
					"    \"\"\"\r\n",
					"    jpeg = rasterio.open(jpeg_path)\r\n",
					"    filetags = jpeg.tags()\r\n",
					"    GPSLatitude = filetags.get(\"EXIF_GPSLatitude\")\r\n",
					"    GPSLatitudeRef = filetags.get(\"EXIF_GPSLatitudeRef\")\r\n",
					"    jpeg.close()\r\n",
					"    return GPSLatitude, GPSLatitudeRef\r\n",
					"\r\n",
					"def get_EXIF_long(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to get the Longitude of a JPEG image\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: path to jpeg file\r\n",
					"    Returns:\r\n",
					"        string of longitude in format of (dd) (mm) (ss.sss) & GPS Reference in terms of (W or E)\r\n",
					"    \"\"\"\r\n",
					"    jpeg = rasterio.open(jpeg_path)\r\n",
					"    filetags = jpeg.tags()\r\n",
					"    GPSLongitude = filetags.get(\"EXIF_GPSLongitude\")\r\n",
					"    GPSLongitudeRef = filetags.get(\"EXIF_GPSLongitudeRef\")\r\n",
					"\r\n",
					"    jpeg.close()\r\n",
					"    return GPSLongitude, GPSLongitudeRef"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def Exif_Cord_Convert(EXIF_Cord, direction):\r\n",
					"    \"\"\"\r\n",
					"    Function to convert coordinate from get_EXIF_long + get_EXIF_lat functions (dd)(mm)(ss.sss) to decimal degrees.\r\n",
					"    Arguments:\r\n",
					"        EXIF_Cord: return from get_EXIF_long or get_EXIF_lat (first return)\r\n",
					"        direction: return from get_EXIF_long or get_EXIF_lat (second return) - Either as \"N\",\"S\",\"E\", or \"W\"\r\n",
					"    Returns:\r\n",
					"        Decimal Degrees of coordinate.\r\n",
					"    \"\"\"\r\n",
					"    new_str = EXIF_Cord.replace(\"(\",\"\")\r\n",
					"    new_str = new_str.replace(\")\",\"\")\r\n",
					"\r\n",
					"    split_str = new_str.split(\" \")\r\n",
					"    \r\n",
					"    decimaldegrees = (float(split_str[0]) + float(split_str[1])/60 + float(split_str[2])/(60*60)) * (-1 if direction in ['W', 'S'] else 1)\r\n",
					"    return decimaldegrees"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyproj\r\n",
					"from shapely.ops import transform\r\n",
					"from shapely.geometry import Point\r\n",
					"from functools import partial\r\n",
					"\r\n",
					"def calculate_bb(lat, lon):\r\n",
					"    \"\"\"\r\n",
					"    Function to calculate a \"fake\" bounding box of 1m by 1m given a lat/long coordinate in Decimal Degrees. The lat/long is assumed to be in WGS84.\r\n",
					"    Arguments:\r\n",
					"        lat: latitude in decimal degrees\r\n",
					"        long: longitude in decimal degrees\r\n",
					"    Returns:\r\n",
					"        array of bounding box to be used for metadata of JPEG.\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    proj_wgs84 = pyproj.Proj('+proj=longlat +datum=WGS84')\r\n",
					"    \r\n",
					"    # Azimuthal equidistant projection\r\n",
					"    aeqd_proj = '+proj=aeqd +lat_0={lat} +lon_0={lon} +x_0=0 +y_0=0'\r\n",
					"    project = partial(\r\n",
					"        pyproj.transform,\r\n",
					"        pyproj.Proj(aeqd_proj.format(lat=lat, lon=lon)),\r\n",
					"        proj_wgs84)\r\n",
					"    \r\n",
					"    buf = Point(0, 0).buffer(1)  # buffers 1 meter\r\n",
					"    return transform(project, buf).bounds"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_bb(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return a faked bounding box using previous functions.\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: path to JPEG which you want faked bounding box from. JPEG must have Latitude/Longitude in EXIF header.\r\n",
					"    Returns:\r\n",
					"        array of bounding box to be used for metadata of JPEG.\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    EXIFlat, latRef = get_EXIF_lat(jpeg_path)\r\n",
					"    EXIFlong, longRef = get_EXIF_long(jpeg_path)\r\n",
					"\r\n",
					"    lat = Exif_Cord_Convert(EXIFlat,latRef)\r\n",
					"    long = Exif_Cord_Convert(EXIFlong,longRef)\r\n",
					"\r\n",
					"    return calculate_bb(lat,long)"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\r\n",
					"\r\n",
					"#Output date time must be in \r\n",
					"def get_jpeg_datetime(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return a STAC-customized DateTime from JPEG image EXIF information.\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: path to JPEG which you want STAC-DateTime for. JPEG must have DateTime in EXIF header.\r\n",
					"    Returns:\r\n",
					"        STAC-Specific DateTime as a string\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    jpeg = rasterio.open(jpeg_path)\r\n",
					"    filetags = jpeg.tags()\r\n",
					"    jpeg.close()\r\n",
					"    EXIF_Datetime = filetags.get(\"EXIF_DateTime\")\r\n",
					"    EXIF_datetime_obj = datetime.strptime(EXIF_Datetime, '%Y:%m:%d %H:%M:%S')\r\n",
					"    STAC_datetime = EXIF_datetime_obj.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\r\n",
					"    return STAC_datetime"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_jpeg_crs(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return \"EPSG:4326\"\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: not used, but still good practice if we want to extend this function\r\n",
					"    Returns:\r\n",
					"        EPSG:4326 as a string which is the GPS-WGS84 Cordinate Reference System\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    crs = \"EPSG:4326\"\r\n",
					"    return crs"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_jpeg_sensor(jpeg_path):\r\n",
					"    \"\"\"\r\n",
					"    Function to return \"RGB\"\r\n",
					"    Arguments:\r\n",
					"        jpeg_path: not used, but still good practice if we want to extend this function\r\n",
					"    Returns:\r\n",
					"        RGB as a string\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    sensor_type = \"RGB\"\r\n",
					"    return sensor_type"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import rasterio\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import os\r\n",
					"\r\n",
					"def write_to_collection(jpeg_path):\r\n",
					"\r\n",
					"    BoundingBox = get_bb(jpeg_path)\r\n",
					"    DateTime = get_jpeg_datetime(jpeg_path)\r\n",
					"    jpeg_CRS = get_jpeg_crs(jpeg_path)\r\n",
					"    Sensor = get_jpeg_sensor(jpeg_path)\r\n",
					"\r\n",
					"    with rasterio.open(\r\n",
					"            jpeg_path,\r\n",
					"            'r+',\r\n",
					"            driver='JPEG') as dst:\r\n",
					"            dst.update_tags(datetime = DateTime, start_datetime = None, end_datetime = None, bbox = BoundingBox, crs = jpeg_CRS, sensor = Sensor)\r\n",
					"            print(\"Added metadata to \"+ jpeg_path)\r\n",
					"            dst = None\r\n",
					"\r\n",
					"    return True"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"\r\n",
					"parsed_url = urlparse(JSON_Dest)\r\n",
					"if parsed_url.path.endswith('/'):\r\n",
					"    container = '/'.join(parsed_url.path.split('/')[2:])\r\n",
					"else:\r\n",
					"    container = '/'.join(parsed_url.path.split('/')[2:])+\"/\"\r\n",
					"\r\n",
					"print(container)\r\n",
					"img_path = f'/synfs/'+jobId+'/STAC_Dest/'+container\r\n",
					"\r\n",
					"outarray = get_blob_file_list(img_path, \".JPG\")\r\n",
					"print(outarray)\r\n",
					"\r\n",
					"for jpeg in outarray:\r\n",
					"    filename = os.path.basename(jpeg)\r\n",
					"    print(filename)\r\n",
					"\r\n",
					"    write_to_collection(jpeg)"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}