{
	"name": "geospatial-iou-nb",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2e68d1d2-23af-4652-976a-0ca271282480"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## The pupose of this noteook to georeference imagery collected from SJV"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mount dinno blob storage, necessary to run each time sparkpool is renewed\r\n",
					"\r\n",
					"from notebookutils import mssparkutils\r\n",
					"# hhttps://innoaoaidata.blob.core.windows.net/innosource\r\n",
					"try:\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"        \"wasbs://coco-lily-ee-output@dinnosa.blob.core.windows.net\",\r\n",
					"        \"/dinnosa\",\r\n",
					"        {\"linkedService\":\"dinnosa\"}\r\n",
					"    )\r\n",
					"    print(\"Successful mount\")\r\n",
					"except:\r\n",
					"    print(\"FAILED TO MOUNT\")\r\n",
					"    print(\"Either due to the drive already been mounted, or because the path is incorrect\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# iterate through file to make sure that our files are present\r\n",
					"\r\n",
					"import os\r\n",
					"\r\n",
					"def get_blob_file_list(directory, filetype):\r\n",
					"    \"\"\"\r\n",
					"    Function to get a full list of files in a directory based on file type\r\n",
					"    Arguments:\r\n",
					"        directory: Directory path of folder you want to pull files from\r\n",
					"        filetype: .XXXX being the file extension of the file you are searching for (including a dot \".\")- ex- \".JPEG\"\r\n",
					"    Returns:\r\n",
					"        Array of filepaths/filename w/extension\r\n",
					"    \"\"\"\r\n",
					"    file_array = []\r\n",
					"    for file in os.listdir(directory):\r\n",
					"        file_ext = os.path.splitext(file)[1]\r\n",
					"        if file_ext == filetype:\r\n",
					"            file_array.append(directory+file)\r\n",
					"    return file_array"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create directory for NB\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"img_path = f'/synfs/'+jobId+'/dinnosa/python_practice'\r\n",
					"outarray = get_blob_file_list(img_path, \".JPG\")\r\n",
					"outarray"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import libraries\r\n",
					"from osgeo import gdal, ogr, osr\r\n",
					"from osgeo import gdalconst\r\n",
					"import geopandas as gpd\r\n",
					"import pandas as pd\r\n",
					"import psycopg2\r\n",
					"import io\r\n",
					"#from geoalchemy2 import Geometry\r\n",
					"import pandas.io.sql as psql\r\n",
					"import os\r\n",
					"import numpy\r\n",
					"import matplotlib.pyplot as plt\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_gdal_translate_lib_8():\r\n",
					"\r\n",
					"    gcpList = [gdal.GCP(-118.959608,35.427667,0, 3856, 2589), gdal.GCP(-118.959332,35.427637,0,3581,4159), gdal.GCP(-118.959303,35.428006,0, 6883,4311), gdal.GCP(-118.9593293,35.4274999,0,2229,4347)]\r\n",
					"    ds = gdal.Open('/synfs/129/dinnosa/python_practice/picture.JPG')\r\n",
					"    fs = ('/synfs/129/dinnosa/python_practice/picture_04.tif')\r\n",
					"    #ds = gdal.Translate(fs, ds, outputSRS = 'EPSG:3857', GCPs = gcpList)\r\n",
					"    ds = gdal.Translate(fs, ds, GCPs = gcpList)\r\n",
					"\r\n",
					"    #gcps = ds.GetGCPs()\r\n",
					"\r\n",
					"    ds = None\r\n",
					"\r\n",
					"    return 'success'"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_gdal_translate_lib_8()"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_file = ('/synfs/129/dinnosa/python_practice/picture_04.tif')\r\n",
					"output_file=('/synfs/129/dinnosa/python_practice/picture_warped.tif')\r\n",
					""
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# gdalwarp -tps -r bilinear -s_srs EPSG:4326 -t_srs EPSG:3857 -overwrite picture_translate_00.tif map-reprojected_03.tif\r\n",
					"options = gdal.WarpOptions(srcSRS='EPSG:4326', dstSRS='EPSG:3857', resampleAlg=gdalconst.GRA_Bilinear)\r\n",
					"\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"ds = gdal.Warp('/synfs/129/dinnosa/python_practice/picture_warped.tif', '/synfs/129/dinnosa/python_practice/picture_04.tif', srcSRS='EPSG:4326', dstSRS='EPSG:3857', outputType=gdal.GDT_Int16)\r\n",
					"ds = None"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gdal.Info('/synfs/129/dinnosa/python_practice/picture_warped.tif')"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_gdal_translate_lib_8():\r\n",
					"\r\n",
					"    gcpList = [gdal.GCP(-118.959608,35.427667,0, 3856, 2589), gdal.GCP(-118.959332,35.427637,0,3581,4159), gdal.GCP(-118.959303,35.428006,0, 6883,4311)]\r\n",
					"    ds = gdal.Open('/synfs/129/dinnosa/python_practice/picture.JPG')\r\n",
					"    fs = ('/synfs/129/dinnosa/python_practice/picture_05.tif')\r\n",
					"    #ds = gdal.Translate(fs, ds, outputSRS = 'EPSG:3857', GCPs = gcpList)\r\n",
					"    ds = gdal.Translate(fs, ds, GCPs = gcpList)\r\n",
					"\r\n",
					"    #gcps = ds.GetGCPs()\r\n",
					"\r\n",
					"    ds = None\r\n",
					"\r\n",
					"    return 'success'"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_gdal_translate_lib_8()"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_file = ('/synfs/129/dinnosa/python_practice/picture_05.tif')\r\n",
					"output_file=('/synfs/129/dinnosa/python_practice/picture_warped_3gcp.tif')"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"ds = gdal.Warp(output_file, input_file, srcSRS='EPSG:4326', dstSRS='EPSG:3857', outputType=gdal.GDT_Int16)\r\n",
					"ds = None"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}