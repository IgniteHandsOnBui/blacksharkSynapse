{
	"name": "geospatial-iou-nb",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8f7f61ae-5355-4568-bf20-f3ead15a8f4b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import rasterio"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"# hhttps://innoaoaidata.blob.core.windows.net/innosource\r\n",
					"try:\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"        \"wasbs://coco-lily-ee-output@dinnosa.blob.core.windows.net\",\r\n",
					"        \"/dinnosa\",\r\n",
					"        {\"linkedService\":\"dinnosa\"}\r\n",
					"    )\r\n",
					"    print(\"Successful mount\")\r\n",
					"except:\r\n",
					"    print(\"FAILED TO MOUNT\")\r\n",
					"    print(\"Either due to the drive already been mounted, or because the path is incorrect\")"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# iterate through file to make sure that our files are present\r\n",
					"\r\n",
					"import os\r\n",
					"\r\n",
					"def get_blob_file_list(directory, filetype):\r\n",
					"    \"\"\"\r\n",
					"    Function to get a full list of files in a directory based on file type\r\n",
					"    Arguments:\r\n",
					"        directory: Directory path of folder you want to pull files from\r\n",
					"        filetype: .XXXX being the file extension of the file you are searching for (including a dot \".\")- ex- \".JPEG\"\r\n",
					"    Returns:\r\n",
					"        Array of filepaths/filename w/extension\r\n",
					"    \"\"\"\r\n",
					"    file_array = []\r\n",
					"    for file in os.listdir(directory):\r\n",
					"        file_ext = os.path.splitext(file)[1]\r\n",
					"        if file_ext == filetype:\r\n",
					"            file_array.append(directory+file)\r\n",
					"    return file_array"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create directory for NB\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"img_path = f'/synfs/'+jobId+'/dinnosa/python_practice'\r\n",
					"outarray = get_blob_file_list(img_path, \".JPG\")\r\n",
					"outarray"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from osgeo import gdal, ogr, osr\r\n",
					"#import struct\r\n",
					"#import sys\r\n",
					"#import os\r\n",
					"#import gdaltest\r\n",
					"#import ogrtest\r\n",
					"#sys.path.append( '../pymod' )"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"-gcp  "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_gdal_translate_lib_8():\r\n",
					"\r\n",
					"    gcpList = [gdal.GCP(3856, 2589,-118.959608,35.427667,0), gdal.GCP(3581,4159,-118.959332,35.427637,0), gdal.GCP(6883,4311,-118.959303,35.428006,0), gdal.GCP(2229,4347,-118.9593293,35.4274999 ,20)]\r\n",
					"    ds = gdal.Open('/synfs/128/dinnosa/python_practice/picture.JPG')\r\n",
					"    fs = ('/synfs/128/dinnosa/python_practice/picture.tif')\r\n",
					"    ds = gdal.Translate(fs, ds, outputSRS = 'EPSG:3857', GCPs = gcpList)\r\n",
					"\r\n",
					"    #gcps = ds.GetGCPs()\r\n",
					"\r\n",
					"    ds = None\r\n",
					"\r\n",
					"    return 'success'"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_gdal_translate_lib_8()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_file = ('/synfs/128/dinnosa/python_practice/picture.tif')\r\n",
					"output_file=('/synfs/128/dinnosa/python_practice/picture_warped.tif')\r\n",
					""
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# gdalwarp -tps -r bilinear -s_srs EPSG:4326 -t_srs EPSG:3857 -overwrite picture_translate_00.tif map-reprojected_03.ti\r\n",
					"gdal.Warp(output_file, input_file, srcSRS = \"EPSG: 4326\", dstSRS = \"EPSG: 3857\")"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gdal.Warp(output_file, input_file,options=\"gdalwarp -tps -r bilinear -s_srs EPSG:4326 -t_srs EPSG:3857\")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"options=\"-overwrite -multi -wm 80% -t_srs EPSG:4283 -co TILED=YES -co BIGTIFF=YES -co COMPRESS=DEFLATE -co NUM_THREADS=ALL_CPUS\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gdal.Warp.help"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pathlib import Path\r\n",
					"from osgeo import gdal, osr\r\n",
					"\r\n",
					"# Adapted from https://svn.osgeo.org/gdal/trunk/autotest/alg/warp.py\r\n",
					"def warp_with_gcps(input_path, output_path, gcps, gcp_epsg=3301, output_epsg=3301):\r\n",
					"    # Open the source dataset and add GCPs to it\r\n",
					"    src_ds = gdal.OpenShared(str(input_path), gdal.GA_ReadOnly)\r\n",
					"    gcp_srs = osr.SpatialReference()\r\n",
					"    gcp_srs.ImportFromEPSG(gcp_epsg)\r\n",
					"    gcp_crs_wkt = gcp_srs.ExportToWkt()\r\n",
					"    src_ds.SetGCPs(gcps, gcp_crs_wkt)\r\n",
					"\r\n",
					"    # Define target SRS\r\n",
					"    dst_srs = osr.SpatialReference()\r\n",
					"    dst_srs.ImportFromEPSG(output_epsg)\r\n",
					"    dst_wkt = dst_srs.ExportToWkt()\r\n",
					"\r\n",
					"    error_threshold = 0.125  # error threshold --> use same value as in gdalwarp\r\n",
					"    resampling = gdal.GRA_Bilinear\r\n",
					"\r\n",
					"    # Call AutoCreateWarpedVRT() to fetch default values for target raster dimensions and geotransform\r\n",
					"    tmp_ds = gdal.AutoCreateWarpedVRT(src_ds,\r\n",
					"                                      None,  # src_wkt : left to default value --> will use the one from source\r\n",
					"                                      dst_wkt,\r\n",
					"                                      resampling,\r\n",
					"                                      error_threshold)\r\n",
					"    dst_xsize = tmp_ds.RasterXSize\r\n",
					"    dst_ysize = tmp_ds.RasterYSize\r\n",
					"    dst_gt = tmp_ds.GetGeoTransform()\r\n",
					"    tmp_ds = None\r\n",
					"\r\n",
					"    # Now create the true target dataset\r\n",
					"    dst_path = str(Path(output_path).with_suffix(\".tif\"))\r\n",
					"    dst_ds = gdal.GetDriverByName('GTiff').Create(dst_path, dst_xsize, dst_ysize, src_ds.RasterCount)\r\n",
					"    dst_ds.SetProjection(dst_wkt)\r\n",
					"    dst_ds.SetGeoTransform(dst_gt)\r\n",
					"    dst_ds.GetRasterBand(1).SetNoDataValue(0)\r\n",
					"\r\n",
					"    # And run the reprojection\r\n",
					"    gdal.ReprojectImage(src_ds,\r\n",
					"                        dst_ds,\r\n",
					"                        None,  # src_wkt : left to default value --> will use the one from source\r\n",
					"                        None,  # dst_wkt : left to default value --> will use the one from destination\r\n",
					"                        resampling,\r\n",
					"                        0,  # WarpMemoryLimit : left to default value\r\n",
					"                        error_threshold,\r\n",
					"                        None,  # Progress callback : could be left to None or unspecified for silent progress\r\n",
					"                        None)  # Progress callback user data\r\n",
					"    dst_ds = None\r\n",
					"\r\n",
					"input_path = Path(\"x.tif\")\r\n",
					"output_path = Path(\"y.tif\")\r\n",
					"# GCP input\r\n",
					"xyz = [...]\r\n",
					"row_col = [...]\r\n",
					"\r\n",
					"gcps = []\r\n",
					"for (x, y, z), (row, col) in zip(xyz, row_col):\r\n",
					"    gcps.append(gdal.GCP(x, y, z, col, row))\r\n",
					"\r\n",
					"warp_with_gcps(input_path, output_path, gcps, gcp_epsg=3301, output_epsg=3301)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import rasterio as rio\r\n",
					"from rasterio.transform import from_gcps\r\n",
					"from rasterio.control import GroundControlPoint"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tl = GroundControlPoint(3817, 2652\r\n",
					", -118.959608, 35.427667)\r\n",
					"bl = GroundControlPoint(3565, 4417, -118.959332, -118.959332, 35.427637)\r\n",
					"br = GroundControlPoint(6913, 4685, -118.959303, 35.428006)\r\n",
					"gcps = [tl, bl, br]"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"transform = from_gcps(gcps)\r\n",
					"crs = 'epsg:3857'\r\n",
					"\r\n",
					"with rio.open(filepath, 'r+') as ds:\r\n",
					"    ds.crs = crs\r\n",
					"    ds.transform = transform"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Test outputSRS and GCPs options\r\n",
					"\r\n",
					"def test_gdal_translate_lib_8():\r\n",
					"\r\n",
					"    gcpList = [gdal.GCP(440720.000,3751320.000,0,0,0), gdal.GCP(441920.000,3751320.000,0,20,0), gdal.GCP(441920.000,3750120.000,0,20,20), gdal.GCP(440720.000,3750120.000,0,0,20)]\r\n",
					"    ds = gdal.Open('../gcore/data/byte.tif')\r\n",
					"    ds = gdal.Translate('tmp/test8.tif', ds, outputSRS = 'EPSG:26711', GCPs = gcpList)\r\n",
					"    if ds is None:\r\n",
					"        return 'fail'\r\n",
					"\r\n",
					"    if ds.GetRasterBand(1).Checksum() != 4672:\r\n",
					"        gdaltest.post_reason('Bad checksum')\r\n",
					"        return 'fail'\r\n",
					"\r\n",
					"    gcps = ds.GetGCPs()\r\n",
					"    if len(gcps) != 4:\r\n",
					"        gdaltest.post_reason( 'GCP count wrong.' )\r\n",
					"        return 'fail'\r\n",
					"\r\n",
					"    if ds.GetGCPProjection().find('26711') == -1:\r\n",
					"        gdaltest.post_reason( 'Bad GCP projection.' )\r\n",
					"        return 'fail'\r\n",
					"\r\n",
					"    ds = None\r\n",
					"\r\n",
					"    return 'success'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}