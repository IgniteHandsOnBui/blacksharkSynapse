{
	"name": "geospatial-iou-nb",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Geospatialspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2d5856a9-cc83-495b-acb7-6f96bf2edb2d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/251b3efb-f673-4fa5-a56e-e2f645fc33fa/resourceGroups/innosyn-pipeline-rg/providers/Microsoft.Synapse/workspaces/innosyn-pipeline-syn-ws/bigDataPools/Geospatialspark",
				"name": "Geospatialspark",
				"type": "Spark",
				"endpoint": "https://innosyn-pipeline-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Geospatialspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import shapely\r\n",
					"from shapely.geometry import Point, Polygon, LineString, GeometryCollection\r\n",
					"import numpy as np\r\n",
					"import geopandas as gpd\r\n",
					"import cv2\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import rasterio.warp\r\n",
					"from shapely.geometry import shape\r\n",
					"import fiona"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"# hhttps://innoaoaidata.blob.core.windows.net/innosource\r\n",
					"try:\r\n",
					"    mssparkutils.fs.mount(\r\n",
					"        \"wasbs://coco-lily-ee-output@dinnosa.blob.core.windows.net\",\r\n",
					"        \"/dinnosa\",\r\n",
					"        {\"linkedService\":\"dinnosa\"}\r\n",
					"    )\r\n",
					"    print(\"Successful mount\")\r\n",
					"except:\r\n",
					"    print(\"FAILED TO MOUNT\")\r\n",
					"    print(\"Either due to the drive already been mounted, or because the path is incorrect\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# iterate through file to make sure that our files are present\r\n",
					"\r\n",
					"import os\r\n",
					"\r\n",
					"def get_blob_file_list(directory, filetype):\r\n",
					"    \"\"\"\r\n",
					"    Function to get a full list of files in a directory based on file type\r\n",
					"    Arguments:\r\n",
					"        directory: Directory path of folder you want to pull files from\r\n",
					"        filetype: .XXXX being the file extension of the file you are searching for (including a dot \".\")- ex- \".JPEG\"\r\n",
					"    Returns:\r\n",
					"        Array of filepaths/filename w/extension\r\n",
					"    \"\"\"\r\n",
					"    file_array = []\r\n",
					"    for file in os.listdir(directory):\r\n",
					"        file_ext = os.path.splitext(file)[1]\r\n",
					"        if file_ext == filetype:\r\n",
					"            file_array.append(directory+file)\r\n",
					"    return file_array"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create directory for NB\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"img_path = f'/synfs/'+jobId+'/dinnosa/geospatial_transformation/'\r\n",
					"outarray = get_blob_file_list(img_path, \".shp\")\r\n",
					"outarray"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gdf_cali = gpd.read_file('/synfs/70/dinnosa/geospatial_transformation/EXAMPLE_AOI.geojson')\r\n",
					"\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # align on projection\r\n",
					"\r\n",
					"california_aoi_path = (img_path + 'Cali_sub.shp')\r\n",
					"gpkg_aoi_path = (img_path + 'gpkg_00.shp')\r\n",
					"\r\n",
					"# https://gis.stackexchange.com/questions/266098/how-to-convert-a-geoseries-to-a-geodataframe-with-geopandas\r\n",
					"\r\n",
					"polys_cali = []\r\n",
					"for pol in fiona.open(california_aoi_path):\r\n",
					"    poly = shape(pol['geometry'])\r\n",
					"    if isinstance(poly, MultiPolygon):\r\n",
					"        polys_cali += poly\r\n",
					"    else:\r\n",
					"        polys_cali.append(poly)\r\n",
					"mp_cali = MultiPolygon(polys_cali)\r\n",
					"\r\n",
					"polys_gpkg = []\r\n",
					"for pol in fiona.open(gpkg_aoi_path):\r\n",
					"    poly = shape(pol['geometry'])\r\n",
					"    if isinstance(poly, MultiPolygon):\r\n",
					"        polys_gpkg += poly\r\n",
					"    else:\r\n",
					"        polys_gpkg.append(poly)\r\n",
					"mp_gpkg = MultiPolygon(polys_gpkg)\r\n",
					"\r\n",
					"mp_gpkg\r\n",
					"\r\n",
					"# gdf_cali = gpd.read_file(mp_cali)\r\n",
					"# gdf_gpkg = gpd.read_file(mp_gpkg)\r\n",
					"\r\n",
					"\r\n",
					"# gdf_cali = gdf_cali.to_crs(4326)\r\n",
					"# gdf_gpkg = gdf_gpkg.to_crs(4326)\r\n",
					"\r\n",
					"# gdf_cali.crs\r\n",
					"# gdf_gpkg.crs"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mp_gpkg[0][]"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from shapely.geometry import MultiPolygon\r\n",
					"\r\n",
					"\r\n",
					"shapefile = ('/synfs/70/dinnosa/geospatial_transformation/Cali_sub.shp')\r\n",
					"\r\n",
					"\r\n",
					"polys = []\r\n",
					"for pol in fiona.open(shapefile):\r\n",
					"    poly = shape(pol['geometry'])\r\n",
					"    if isinstance(poly, MultiPolygon):\r\n",
					"        polys += poly\r\n",
					"    else:\r\n",
					"        polys.append(poly)\r\n",
					"mp = MultiPolygon(polys)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"f, ax = plt.subplots(1)\r\n",
					"gdf_cali.plot(ax=ax)\r\n",
					"#gdf_gpkg.plot(ax=ax,cmap=None,)\r\n",
					"plt.show()"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}